Imports System.Web
Imports System.IO
Imports SSignal_Protocols
Imports SSignalDB
Imports SSignal_GlobalCommonCode
Imports SSignal_ServerCommonCode

Public Class 类_打开或创建数据库

    Const 常用数据缓存区大小_兆 As Integer = 100

    Public Function 打开或创建主数据库(ByVal Context As HttpContext, ByVal 副数据库 As 类_数据库) As 类_数据库
        Dim 目录路径 As String = Context.Server.MapPath("/") & "App_Data"
        If Directory.Exists(目录路径) = False Then Directory.CreateDirectory(目录路径)
        Dim 文件名 As String = "TransportData_RequireBackup"
        Dim 文件路径 As String = 目录路径 & "\" & 文件名 & 数据库文件扩展名
        Const 在副数据库独一无二的名称 As String = "主数据库"
        Dim 数据库 As 类_数据库 = Nothing
        Dim 数据库类型 As 数据库类型_常量集合 = 数据库类型_常量集合.长期_需备份
        Const 新页缓存文件长度限制_兆 As Integer = 10    '此处不要太大
        If File.Exists(文件路径) = True Then
            数据库 = New 类_数据库(文件路径, 数据库类型, , 副数据库, 在副数据库独一无二的名称)
            Try
                数据库.打开(常用数据缓存区大小_兆, 类_数据库.新页缓存文件的处理方式_常量集合.读取, 新页缓存文件长度限制_兆)
            Catch ex As Exception
                数据库.关闭()
                数据库 = Nothing
            End Try
        Else
            Try
                文件路径 = 创建数据库文件(目录路径, 文件名, 数据库类型, True)
                数据库 = New 类_数据库(文件路径, 数据库类型, , 副数据库, 在副数据库独一无二的名称)
                数据库.打开(常用数据缓存区大小_兆, 类_数据库.新页缓存文件的处理方式_常量集合.不读取, 新页缓存文件长度限制_兆)
            Catch ex As Exception
                If 数据库 IsNot Nothing Then
                    数据库.关闭()
                    数据库 = Nothing
                End If
            End Try
        End If
        If 数据库 IsNot Nothing Then
            Try
                Call 创建表_讯友录(数据库)
                Call 创建表_讯友录版本(数据库)
                Call 创建表_讯友录变动(数据库)
                Call 创建表_创建的小聊天群(数据库)
                Call 创建表_小聊天群成员(数据库)
                Call 创建表_加入的小聊天群(数据库)
                Call 创建表_加入的大聊天群(数据库)
                Call 创建表_黑域(数据库)
                Call 创建表_白域(数据库)
            Catch ex As Exception
                数据库.关闭()
                数据库 = Nothing
            End Try
        End If
        Return 数据库
    End Function

    Private Sub 创建表_讯友录(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯友录"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("英语讯宝地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("本国语讯宝地址", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("备注", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯友备注字符数, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("标签一", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯友标签字符数, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("标签二", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯友标签字符数, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("主机名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.主机名字符数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("拉黑", 数据类型_常量集合.bit_位)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户英语讯宝地址", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("英语讯宝地址")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#用户本国语讯宝地址", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("本国语讯宝地址")
            Dim 列添加器2 As New 类_列添加器
            列添加器2.添加列_用于筛选器("本国语讯宝地址", 筛选方式_常量集合.不为空, Nothing)
            Dim 筛选器 As New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#用户标签一")
            索引.添加排序列("用户编号")
            索引.添加排序列("标签一")
            列添加器2 = New 类_列添加器
            列添加器2.添加列_用于筛选器("标签一", 筛选方式_常量集合.不为空, Nothing)
            筛选器 = New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#用户标签二")
            索引.添加排序列("用户编号")
            索引.添加排序列("标签二")
            列添加器2 = New 类_列添加器
            列添加器2.添加列_用于筛选器("标签二", 筛选方式_常量集合.不为空, Nothing)
            筛选器 = New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_讯友录版本(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯友录版本"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数, 值许可_常量集合.是主键_升序)
            列添加器.添加列_用于创建表("更新时间", 数据类型_常量集合.bigint_长整数)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器)
            指令.执行()
        End If
    End Sub

    '数据库_获取讯友录变动
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_讯友录变动(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯友录变动"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("变动", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("英语讯宝地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("原标签名", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯友标签字符数, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("新标签名", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯友标签字符数, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户地址", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("英语讯宝地址")
            Dim 列添加器2 As New 类_列添加器
            列添加器2.添加列_用于筛选器("英语讯宝地址", 筛选方式_常量集合.不为空, Nothing)
            Dim 筛选器 As New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#用户时间")
            索引.添加排序列("用户编号")
            索引.添加排序列("时间", True)
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#时间")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_创建的小聊天群(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "创建的小聊天群"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("创建时间", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户群编号", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("群编号")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#创建时间")
            索引.添加排序列("创建时间", True)
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_小聊天群成员(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "小聊天群成员"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("群主", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("英语讯宝地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("本国语讯宝地址", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("主机名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.主机名字符数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("角色", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("加入时间", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#群主编号英语讯宝地址", True)
            索引.添加排序列("群主")
            索引.添加排序列("群编号")
            索引.添加排序列("英语讯宝地址")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#群主编号角色加入时间")
            索引.添加排序列("群主")
            索引.添加排序列("群编号")
            索引.添加排序列("角色", True)
            索引.添加排序列("加入时间")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_加入的小聊天群(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "加入的小聊天群"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("群主地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("群备注", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.群名称字符数)
            列添加器.添加列_用于创建表("加入时间", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户加入时间")
            索引.添加排序列("用户编号")
            索引.添加排序列("加入时间")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#群主编号用户", True)
            索引.添加排序列("群主地址")
            索引.添加排序列("群编号")
            索引.添加排序列("用户编号")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_加入的大聊天群(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "加入的大聊天群"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("主机名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.主机名字符数)
            列添加器.添加列_用于创建表("英语域名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.域名长度)
            列添加器.添加列_用于创建表("本国语域名", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.域名长度)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("群名称", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.群名称字符数)
            列添加器.添加列_用于创建表("加入时间", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户加入时间")
            索引.添加排序列("用户编号")
            索引.添加排序列("加入时间")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#用户域名主机名群", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("英语域名")
            索引.添加排序列("主机名")
            索引.添加排序列("群编号")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_黑域(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "黑域"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("英语域名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.域名长度)
            列添加器.添加列_用于创建表("本国语域名", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.域名长度, 值许可_常量集合.可为空)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户编号英语域名", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("英语域名")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_白域(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "白域"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("英语域名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.域名长度)
            列添加器.添加列_用于创建表("本国语域名", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.域名长度, 值许可_常量集合.可为空)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#用户编号英语域名", True)
            索引.添加排序列("用户编号")
            索引.添加排序列("英语域名")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub


    Public Function 打开或创建副数据库(ByVal Context As HttpContext) As 类_数据库
        Dim 目录路径 As String = Context.Server.MapPath("/") & "App_Data"
        If Directory.Exists(目录路径) = False Then Directory.CreateDirectory(目录路径)
        Dim 文件名 As String = "TransportData_NoBackup"
        Dim 文件路径 As String = 目录路径 & "\" & 文件名 & 数据库文件扩展名
        Dim 数据库 As 类_数据库 = Nothing
        Dim 数据库类型 As 数据库类型_常量集合 = 数据库类型_常量集合.长期_无需备份
        Const 新页缓存文件长度限制_兆 As Integer = 100
        If File.Exists(文件路径) = True Then
            数据库 = New 类_数据库(文件路径, 数据库类型)
            Try
                数据库.打开(常用数据缓存区大小_兆, 类_数据库.新页缓存文件的处理方式_常量集合.读取, 新页缓存文件长度限制_兆)
            Catch ex As Exception
                数据库.关闭()
                数据库 = Nothing
            End Try
        Else
            Try
                文件路径 = 创建数据库文件(目录路径, 文件名, 数据库类型, True)
                数据库 = New 类_数据库(文件路径, 数据库类型)
                数据库.打开(常用数据缓存区大小_兆, 类_数据库.新页缓存文件的处理方式_常量集合.不读取, 新页缓存文件长度限制_兆)
            Catch ex As Exception
                If 数据库 IsNot Nothing Then
                    数据库.关闭()
                    数据库 = Nothing
                End If
            End Try
        End If
        If 数据库 IsNot Nothing Then
            Try
                Dim 类 As New 类_创建共有的表
                Call 类.创建表_服务器(数据库)
                Call 类.创建表_系统任务(数据库)
                Call 创建表_讯宝发送(数据库)
                Call 创建表_讯宝推送(数据库)
                Call 创建表_讯宝不推送(数据库)
                Call 创建表_带文件讯宝(数据库)
                Dim I, 最大字数, 最大字数2 As Integer
                For I = 1 To 最大值_常量集合.讯宝文本长度
                    最大字数 = 获取文本库号(I)
                    If 最大字数 <> 最大字数2 Then
                        最大字数2 = 最大字数
                        Call 创建表_文本库(数据库, 最大字数)
                    End If
                Next
                Call 创建表_收发统计(数据库)
                Call 创建表_接收统计(数据库)
            Catch ex As Exception
                数据库.关闭()
                数据库 = Nothing
            End Try
        End If
        Return 数据库
    End Function

    '数据库_获取要发送的新讯宝
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_讯宝发送(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯宝发送"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送者英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("发送者编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送者位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("发送序号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("接收者英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("接收者主机名", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.主机名字符数)
            列添加器.添加列_用于创建表("接收者位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("群接收者", 数据类型_常量集合.image_图片, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("群主英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("指令", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("文本库号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("文本编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("宽度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("高度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("秒数", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("设备类型", 数据类型_常量集合.tinyint_字节)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#发送者发送序号时间", True)
            索引.添加排序列("发送者英语地址")
            索引.添加排序列("发送序号")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#时间")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    '数据库_获取要推送的新讯宝
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_讯宝推送(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯宝推送"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送者英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("同服发送者编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送序号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("群主英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("接收者编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("群接收者", 数据类型_常量集合.image_图片, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("指令", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("文本库号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("文本编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("宽度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("高度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("秒数", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("设备类型", 数据类型_常量集合.tinyint_字节)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#发送者发送序号接收者", True)
            索引.添加排序列("发送者英语地址")
            索引.添加排序列("发送序号")
            索引.添加排序列("接收者编号")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#时间")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    '数据库_获取不推送的讯宝
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_讯宝不推送(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "讯宝不推送"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送者英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度)
            列添加器.添加列_用于创建表("发送序号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("群主英语地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.可为空)
            列添加器.添加列_用于创建表("群编号", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("接收者编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("指令", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("文本库号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("文本编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("宽度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("高度", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("秒数", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("结果", 数据类型_常量集合.tinyint_字节)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#发送者发送序号接收者", True)
            索引.添加排序列("发送者英语地址")
            索引.添加排序列("发送序号")
            索引.添加排序列("接收者编号")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#接收者时间")
            索引.添加排序列("接收者编号")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#时间")
            索引.添加排序列("时间")
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_文本库(ByVal 数据库 As 类_数据库, ByVal 最大字数 As Short)
        Dim 表名 As String = 最大字数 & "库"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("编号", 数据类型_常量集合.bigint_长整数, 值许可_常量集合.是主键_升序)
            列添加器.添加列_用于创建表("文本", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大字数)
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("接收者", 数据类型_常量集合.bigint_长整数)

            Dim 索引添加器 As New 类_索引添加器

            Dim 索引 As New 类_索引("#接收者时间")
            索引.添加排序列("接收者")
            索引.添加排序列("时间")
            Dim 列添加器2 As New 类_列添加器
            列添加器2.添加列_用于筛选器("接收者", 筛选方式_常量集合.大于, 0)
            Dim 筛选器 As New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            索引 = New 类_索引("#时间")
            索引.添加排序列("时间")
            列添加器2 = New 类_列添加器
            列添加器2.添加列_用于筛选器("时间", 筛选方式_常量集合.大于, 0)
            筛选器 = New 类_筛选器
            筛选器.添加一组筛选条件(列添加器2)
            索引.添加筛选器(筛选器)
            索引添加器.添加索引(索引)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引添加器)
            指令.执行()
        End If
    End Sub

    Private Sub 创建表_带文件讯宝(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "带文件讯宝"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("时间", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("发送者编号", 数据类型_常量集合.bigint_长整数)
            列添加器.添加列_用于创建表("指令", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("文本", 数据类型_常量集合.nvarchar_双字节变长短文本, 最大值_常量集合.带文件讯宝的文本长度)

            Dim 索引 As New 类_索引("#时间")
            索引.添加排序列("时间")

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器, 索引)
            指令.执行()
        End If
    End Sub

    '数据库_统计发送次数, 数据库_统计个人接收次数, 获取统计数据，获取讯宝数量
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_收发统计(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "收发统计"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("用户编号", 数据类型_常量集合.bigint_长整数, 值许可_常量集合.是主键_升序)
            列添加器.添加列_用于创建表("位置号", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("今日几号", 数据类型_常量集合.int_整数)
            列添加器.添加列_用于创建表("今日发送", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("今日接收", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("昨日发送", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("昨日接收", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("前日发送", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("前日接收", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("今日几时", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("时段发送", 数据类型_常量集合.smallint_短整数)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器)
            指令.执行()
        End If
    End Sub

    '数据库_统计接收次数
    '按照下面的列的顺序读取数据，调整列位置后，须修改读取器后面括号内的数字
    Private Sub 创建表_接收统计(ByVal 数据库 As 类_数据库)
        Const 表名 As String = "接收统计"
        Dim 指令2 As New 类_数据库指令_查找表(数据库, 表名)
        If 指令2.执行 Is Nothing Then
            Dim 列添加器 As New 类_列添加器
            列添加器.添加列_用于创建表("英语讯宝地址", 数据类型_常量集合.varchar_单字节变长短文本, 最大值_常量集合.讯宝和电子邮箱地址长度, 值许可_常量集合.是主键_升序)
            列添加器.添加列_用于创建表("今日几号", 数据类型_常量集合.int_整数)
            列添加器.添加列_用于创建表("今日接收", 数据类型_常量集合.smallint_短整数)
            列添加器.添加列_用于创建表("今日几时", 数据类型_常量集合.tinyint_字节)
            列添加器.添加列_用于创建表("时段接收", 数据类型_常量集合.smallint_短整数)

            Dim 指令 As New 类_数据库指令_创建表(数据库, 表名, 列添加器)
            指令.执行()
        End If
    End Sub

End Class
